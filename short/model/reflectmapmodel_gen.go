// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	reflectMapFieldNames          = builder.RawFieldNames(&ReflectMap{})
	reflectMapRows                = strings.Join(reflectMapFieldNames, ",")
	reflectMapRowsExpectAutoSet   = strings.Join(stringx.Remove(reflectMapFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	reflectMapRowsWithPlaceHolder = strings.Join(stringx.Remove(reflectMapFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheShortReflectMapIdPrefix   = "cache:short:reflectMap:id:"
	cacheShortReflectMapMd5Prefix  = "cache:short:reflectMap:md5:"
	cacheShortReflectMapSurlPrefix = "cache:short:reflectMap:surl:"
)

type (
	reflectMapModel interface {
		Insert(ctx context.Context, data *ReflectMap) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ReflectMap, error)
		FindOneByMd5(ctx context.Context, md5 sql.NullString) (*ReflectMap, error)
		FindOneBySurl(ctx context.Context, surl sql.NullString) (*ReflectMap, error)
		Update(ctx context.Context, data *ReflectMap) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultReflectMapModel struct {
		sqlc.CachedConn
		table string
	}

	ReflectMap struct {
		Id       uint64         `db:"id"`        // primary key
		CreateAt time.Time      `db:"create_at"` // create time
		CreateBy string         `db:"create_by"` // create by
		IsDel    uint64         `db:"is_del"`    // soft delete or not ? 0-not delete 1-delete
		Lurl     sql.NullString `db:"lurl"`      // long url
		Md5      sql.NullString `db:"md5"`       // long url md5
		Surl     sql.NullString `db:"surl"`      // short url
		ExpireAt sql.NullTime   `db:"expire_at"` // expire_time
	}
)

func newReflectMapModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultReflectMapModel {
	return &defaultReflectMapModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`reflect_map`",
	}
}

func (m *defaultReflectMapModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	shortReflectMapIdKey := fmt.Sprintf("%s%v", cacheShortReflectMapIdPrefix, id)
	shortReflectMapMd5Key := fmt.Sprintf("%s%v", cacheShortReflectMapMd5Prefix, data.Md5)
	shortReflectMapSurlKey := fmt.Sprintf("%s%v", cacheShortReflectMapSurlPrefix, data.Surl)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, shortReflectMapIdKey, shortReflectMapMd5Key, shortReflectMapSurlKey)
	return err
}

func (m *defaultReflectMapModel) FindOne(ctx context.Context, id uint64) (*ReflectMap, error) {
	shortReflectMapIdKey := fmt.Sprintf("%s%v", cacheShortReflectMapIdPrefix, id)
	var resp ReflectMap
	err := m.QueryRowCtx(ctx, &resp, shortReflectMapIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reflectMapRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReflectMapModel) FindOneByMd5(ctx context.Context, md5 sql.NullString) (*ReflectMap, error) {
	shortReflectMapMd5Key := fmt.Sprintf("%s%v", cacheShortReflectMapMd5Prefix, md5)
	var resp ReflectMap
	err := m.QueryRowIndexCtx(ctx, &resp, shortReflectMapMd5Key, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `md5` = ? limit 1", reflectMapRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, md5); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReflectMapModel) FindOneBySurl(ctx context.Context, surl sql.NullString) (*ReflectMap, error) {
	shortReflectMapSurlKey := fmt.Sprintf("%s%v", cacheShortReflectMapSurlPrefix, surl)
	var resp ReflectMap
	err := m.QueryRowIndexCtx(ctx, &resp, shortReflectMapSurlKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `surl` = ? limit 1", reflectMapRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, surl); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReflectMapModel) Insert(ctx context.Context, data *ReflectMap) (sql.Result, error) {
	shortReflectMapIdKey := fmt.Sprintf("%s%v", cacheShortReflectMapIdPrefix, data.Id)
	shortReflectMapMd5Key := fmt.Sprintf("%s%v", cacheShortReflectMapMd5Prefix, data.Md5)
	shortReflectMapSurlKey := fmt.Sprintf("%s%v", cacheShortReflectMapSurlPrefix, data.Surl)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, reflectMapRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreateBy, data.IsDel, data.Lurl, data.Md5, data.Surl, data.ExpireAt)
	}, shortReflectMapIdKey, shortReflectMapMd5Key, shortReflectMapSurlKey)
	return ret, err
}

func (m *defaultReflectMapModel) Update(ctx context.Context, newData *ReflectMap) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	shortReflectMapIdKey := fmt.Sprintf("%s%v", cacheShortReflectMapIdPrefix, data.Id)
	shortReflectMapMd5Key := fmt.Sprintf("%s%v", cacheShortReflectMapMd5Prefix, data.Md5)
	shortReflectMapSurlKey := fmt.Sprintf("%s%v", cacheShortReflectMapSurlPrefix, data.Surl)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, reflectMapRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CreateBy, newData.IsDel, newData.Lurl, newData.Md5, newData.Surl, newData.ExpireAt, newData.Id)
	}, shortReflectMapIdKey, shortReflectMapMd5Key, shortReflectMapSurlKey)
	return err
}

func (m *defaultReflectMapModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheShortReflectMapIdPrefix, primary)
}

func (m *defaultReflectMapModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reflectMapRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultReflectMapModel) tableName() string {
	return m.table
}
